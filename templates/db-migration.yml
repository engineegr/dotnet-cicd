spec:
  inputs:
    stage:
      default: deploy
      description: "Defines the deploy stage"
    when:
      options: ["on_success", "manual"]
      default: manual
      description: "Manually or automatically"
    shell_runner:
      default: linux
      description: "Gitlab runner which query healtcheck from"
    app_title:
      default: eptw
      description: "Application title"
    cs_project_path:
      description: "Application project root directory. Example: Src/Issow.Web/Issow.Web.csproj"
    project_root:
      description: "Application project root directory. Example: Src/Issow.Web"
    db_context:
      description: "Dotnet DB Context being migrated"
    environment:
      default: development
      description: "Build environment"
    if_self_contained:
      type: string
      default: "true"
      description: "If Dotnet build must be self-contained"

    default_branch:
      default: develop
    if_deploy_by_tag:
      default: "false"
    commit_tag_regexp:
      default: '/-dummy$/'

    rid:
      default: centos.9-x64
      description: "Dotnet Runtime identifier"
    aspnetcore_environment:
      default: Production
      description: "AspNet.Core environment: see https://learn.microsoft.com/en-us/ef/core/cli/dotnet"
    connection_string:
      description: |
        DB connection string. Example: UserID=user;Password=secret;Host= yuzdc1-n-v22037.sakhalin2.ru;Port=5432;Database=db_name;Pooling=true;IncludeErrorDetail=true;
    allow_failure:
      default: "false"
      description: "If exit 1 in case of Unhealthy status"

---
variables:
  # Use the global variables to have ability to pass through or omit the stages (test, deploy)
  CI_DEBUG_TRACE: "true"
  IF_TRUTH: "true"
  IF_FALSE: "false"
  DUMMY: "DUMMY"

"db_migration-$[[ inputs.app_title ]]":
  stage: $[[ inputs.stage ]]
  environment: $[[ inputs.environment ]]
  when: $[[ inputs.when ]]
  rules:
    - if: '$IF_FALSE =~ "$[[ inputs.allow_failure ]]"
      && ($CI_COMMIT_BRANCH == "$[[ inputs.default_branch ]]" && $IF_FALSE == "$[[ inputs.if_deploy_by_tag ]]"
      || $CI_COMMIT_TAG != null && $CI_COMMIT_TAG =~ "$[[ inputs.commit_tag_regexp ]]" && $IF_TRUTH == "$[[ inputs.if_deploy_by_tag ]]")'
      allow_failure: false
    - if: '$IF_TRUTH =~ "$[[ inputs.allow_failure ]]"
      && ($CI_COMMIT_BRANCH == "$[[ inputs.default_branch ]]" && $IF_FALSE == "$[[ inputs.if_deploy_by_tag ]]"
      || $CI_COMMIT_TAG != null && $CI_COMMIT_TAG =~ "$[[ inputs.commit_tag_regexp ]]" && $IF_TRUTH == "$[[ inputs.if_deploy_by_tag ]]")'
      allow_failure: true
  tags:
    - $[[ inputs.shell_runner ]]
  script:
    - |
      export SHELLOPTS
      set -o errexit
      set -o xtrace
      #
      # COLORS
      #
      # Black        0;30     Dark Gray     1;30
      # Red          0;31     Light Red     1;31
      # Green        0;32     Light Green   1;32
      # Brown/Orange 0;33     Yellow        1;33
      # Blue         0;34     Light Blue    1;34
      # Purple       0;35     Light Purple  1;35
      # Cyan         0;36     Light Cyan    1;36
      # Light Gray   0;37     White         1;37
      #
      GREEN_C='\033[0;32m'
      ORANGE_C='\033[0;33m'
      RED_C='\033[0;31m'
      NC='\033[0m' # No color
      echo -e "${GREEN_C}Debug db-migration: $[[ inputs.app_title ]]. Check dotnet-ef tool presence...${NC}"
      dotnet-ef --version 2>/dev/null || ERR=$?
      if [[ $ERR -ne 0 ]]; then
        echo -e "${RED_C}ERROR db-migration: No dotnet-ef tool installed${NC}"
        exit $ERR
      fi

      echo -e "${GREEN_C}Debug db-migration: Start db migration..."
      CS_PROJECT_PATH="$[[ inputs.cs_project_path ]]"
      PROJECT_ROOT="$[[ inputs.project_root ]]"
      RID="$[[ inputs.rid ]]"
      CONNECTION_STRING="$[[ inputs.connection_string ]]"
      DB_CONTEXT="$[[ inputs.db_context ]]"
      ASPNETCORE_ENVIRONMENT="$[[ inputs.aspnetcore_environment ]]"

      dotnet build "${CS_PROJECT_PATH}" --configuration Release --runtime "${RID}" \
        --self-contained "$[[ inputs.if_self_contained ]]" --source "${NUGET_REPO_URL}"

      dotnet-ef database update -v --project "${PROJECT_ROOT}" \
        --configuration Release --runtime "${RID}" \
        --context "${DB_CONTEXT}" \
        --no-build \
        --connection "${CONNECTION_STRING}" \
        -- --environment "${ASPNETCORE_ENVIRONMENT}"
